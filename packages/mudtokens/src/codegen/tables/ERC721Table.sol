// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

struct ERC721TableData {
  address owner;
  address tokenApproval;
  string uri;
}

library ERC721Table {
  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.ADDRESS;
    _schema[1] = SchemaType.ADDRESS;
    _schema[2] = SchemaType.STRING;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "tokenId";
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "owner";
    fieldNames[1] = "tokenApproval";
    fieldNames[2] = "uri";
  }

  /** Register the table's key schema, value schema, key names and value names */
  function register(bytes32 _tableId) internal {
    StoreSwitch.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table's key schema, value schema, key names and value names (using the specified store) */
  function register(IStore _store, bytes32 _tableId) internal {
    _store.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Get owner */
  function getOwner(bytes32 _tableId, uint256 tokenId) internal view returns (address owner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get owner (using the specified store) */
  function getOwner(IStore _store, bytes32 _tableId, uint256 tokenId) internal view returns (address owner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set owner */
  function setOwner(bytes32 _tableId, uint256 tokenId, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((owner)), getValueSchema());
  }

  /** Set owner (using the specified store) */
  function setOwner(IStore _store, bytes32 _tableId, uint256 tokenId, address owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((owner)), getValueSchema());
  }

  /** Get tokenApproval */
  function getTokenApproval(bytes32 _tableId, uint256 tokenId) internal view returns (address tokenApproval) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get tokenApproval (using the specified store) */
  function getTokenApproval(
    IStore _store,
    bytes32 _tableId,
    uint256 tokenId
  ) internal view returns (address tokenApproval) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set tokenApproval */
  function setTokenApproval(bytes32 _tableId, uint256 tokenId, address tokenApproval) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((tokenApproval)), getValueSchema());
  }

  /** Set tokenApproval (using the specified store) */
  function setTokenApproval(IStore _store, bytes32 _tableId, uint256 tokenId, address tokenApproval) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((tokenApproval)), getValueSchema());
  }

  /** Get uri */
  function getUri(bytes32 _tableId, uint256 tokenId) internal view returns (string memory uri) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2, getValueSchema());
    return (string(_blob));
  }

  /** Get uri (using the specified store) */
  function getUri(IStore _store, bytes32 _tableId, uint256 tokenId) internal view returns (string memory uri) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2, getValueSchema());
    return (string(_blob));
  }

  /** Set uri */
  function setUri(bytes32 _tableId, uint256 tokenId, string memory uri) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    StoreSwitch.setField(_tableId, _keyTuple, 2, bytes((uri)), getValueSchema());
  }

  /** Set uri (using the specified store) */
  function setUri(IStore _store, bytes32 _tableId, uint256 tokenId, string memory uri) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    _store.setField(_tableId, _keyTuple, 2, bytes((uri)), getValueSchema());
  }

  /** Get the length of uri */
  function lengthUri(bytes32 _tableId, uint256 tokenId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 2, getValueSchema());
    unchecked {
      return _byteLength / 1;
    }
  }

  /** Get the length of uri (using the specified store) */
  function lengthUri(IStore _store, bytes32 _tableId, uint256 tokenId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 2, getValueSchema());
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * Get an item of uri
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemUri(bytes32 _tableId, uint256 tokenId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        2,
        getValueSchema(),
        _index * 1,
        (_index + 1) * 1
      );
      return (string(_blob));
    }
  }

  /**
   * Get an item of uri (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemUri(
    IStore _store,
    bytes32 _tableId,
    uint256 tokenId,
    uint256 _index
  ) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    unchecked {
      bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 2, getValueSchema(), _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /** Push a slice to uri */
  function pushUri(bytes32 _tableId, uint256 tokenId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    StoreSwitch.pushToField(_tableId, _keyTuple, 2, bytes((_slice)), getValueSchema());
  }

  /** Push a slice to uri (using the specified store) */
  function pushUri(IStore _store, bytes32 _tableId, uint256 tokenId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    _store.pushToField(_tableId, _keyTuple, 2, bytes((_slice)), getValueSchema());
  }

  /** Pop a slice from uri */
  function popUri(bytes32 _tableId, uint256 tokenId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    StoreSwitch.popFromField(_tableId, _keyTuple, 2, 1, getValueSchema());
  }

  /** Pop a slice from uri (using the specified store) */
  function popUri(IStore _store, bytes32 _tableId, uint256 tokenId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    _store.popFromField(_tableId, _keyTuple, 2, 1, getValueSchema());
  }

  /**
   * Update a slice of uri at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateUri(bytes32 _tableId, uint256 tokenId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)), getValueSchema());
    }
  }

  /**
   * Update a slice of uri (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateUri(IStore _store, bytes32 _tableId, uint256 tokenId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)), getValueSchema());
    }
  }

  /** Get the full data */
  function get(bytes32 _tableId, uint256 tokenId) internal view returns (ERC721TableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 _tableId, uint256 tokenId) internal view returns (ERC721TableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(bytes32 _tableId, uint256 tokenId, address owner, address tokenApproval, string memory uri) internal {
    bytes memory _data = encode(owner, tokenApproval, uri);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 _tableId,
    uint256 tokenId,
    address owner,
    address tokenApproval,
    string memory uri
  ) internal {
    bytes memory _data = encode(owner, tokenApproval, uri);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    _store.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using the data struct */
  function set(bytes32 _tableId, uint256 tokenId, ERC721TableData memory _table) internal {
    set(_tableId, tokenId, _table.owner, _table.tokenApproval, _table.uri);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 _tableId, uint256 tokenId, ERC721TableData memory _table) internal {
    set(_store, _tableId, tokenId, _table.owner, _table.tokenApproval, _table.uri);
  }

  /**
   * Decode the tightly packed blob using this table's schema.
   * Undefined behaviour for invalid blobs.
   */
  function decode(bytes memory _blob) internal pure returns (ERC721TableData memory _table) {
    // 40 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 40));

    _table.owner = (address(Bytes.slice20(_blob, 0)));

    _table.tokenApproval = (address(Bytes.slice20(_blob, 20)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 40) {
      // skip static data length + dynamic lengths word
      uint256 _start = 72;
      uint256 _end;
      unchecked {
        _end = 72 + _encodedLengths.atIndex(0);
      }
      _table.uri = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(address owner, address tokenApproval, string memory uri) internal pure returns (bytes memory) {
    PackedCounter _encodedLengths;
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(bytes(uri).length);
    }

    return abi.encodePacked(owner, tokenApproval, _encodedLengths.unwrap(), bytes((uri)));
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(uint256 tokenId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    return _keyTuple;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 _tableId, uint256 tokenId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 _tableId, uint256 tokenId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(tokenId));

    _store.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }
}
